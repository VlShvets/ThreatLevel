#ifndef AREA
#define AREA

#include <QPointF>

namespace ThreatLevel
{

/// Структура параметров ЗКВ
struct Area
{
    /// Начальные параметры
    QPointF         initPos;            /// Координаты центра
    float           initRadius;         /// Пространственный радиус
    float           initCritTime;       /// Критическое время
    float           initDetectRange;    /// Радиус обнаружения

    /// --------------------------------------------------
    /// Результирующие параметры по конкретному ЗКВ
    /// --------------------------------------------------

    /// Идентифицированные с позиционным районом трассы
    QVector <int>   numTrack;           /// Массив номеров идентифицированных с ЗКВ трасс

    /// Крылатые ракеты
    int             CMCount;            /// Текущее количество КР
    int             CMMaxCount;         /// Максимальное количество КР

    /// Балистические цели
    int             BGCount;            /// Текущее количество БЦ
    int             BGMaxCount;         /// Максимальное количество БЦ

    /// Количественный состав налета с учетом тротилового эквивалента БЦ
    int             raidCount;          /// Текущее количество трасс
    int             raidMaxCount;       /// Максимальное количество трасс

    /// --------------------------------------------------
    /// Результирующие параметры по всем ЗКВ
    /// --------------------------------------------------

    /// Количественные параметры по всем трассам
    static int  detectTracksCount;      /// Количество обнаруженных не идентифицированных ни с каким ЗКВ трасс в текущий момент
    static int  idenTracksMaxCount;     /// Максимальное количество идентифицированных с каким-либо ЗКВ трасс в текущий момент

    /// Крылатые ракеты
    static int  CMSumCount;             /// Текущее суммарное количество КР
    static int  CMMaxSumCount;          /// Максимальное суммарное количество КР

    /// Балистические цели
    static int  BGSumCount;             /// Текущее суммарное количество БЦ
    static int  BGMaxSumCount;          /// Максимальное суммарное количество БЦ

    /// Количественный состав налета с учетом тротилового эквивалента БЦ
    static int  raidSumCount;           /// Текущий количественный состав налета
    static int  raidMaxSumCount;        /// Максимальный количественный состав налета
};

}

#endif // AREA

