#ifndef AREA
#define AREA

#include <QPointF>

namespace ThreatLevel
{

/// Структура параметров позиционных районов
struct Area
{
    /// Начальные параметры
    QPointF         initPos;            /// Координаты центра
    float           initRadius;         /// Пространственный радиус
    float           initCritTime;       /// Критическое время
    float           initRadarRange;     /// Радиус обнаружения

    /// Ассоциированные с ПР трассы
    QVector <int>   numTrack;           /// Массив номеров ассоциированных с ПР трасс

    /// Результирующие параметры по времени
    float           diffTime;           /// Разность времени поражения с погрешностью и точного времени поражения в текущий момент времени
    float           sumDiffTime;        /// Сумма квадратов разности времени поражения с погрешностью и точного времени поражения
    float           rmsDiffTime;        /// Среднеквадратическая разность времени поражения с погрешностью и точного времени поражения

    /// Результирующие параметры по крылатым ракетам
    int             CMCount;            /// Количество ассоциированных с ПР крылатых ракет
    int             CMMaxCount;         /// Максимальное количество ассоциированных с ПР крылатых ракет
    static int      CMSumCount;         /// Суммарное количество крылатых ракет
    static int      CMMaxSumCount;      /// Максимальное суммарное количество крылатых ракет

    /// Результирующие параметры по балистическим целям
    int             BGCount;            /// Количество ассоциированных с ПР баллистических целей
    int             BGMaxCount;         /// Максимальное количество ассоциированных с ПР баллистических целей
    static int      BGSumCount;         /// Суммарное количество баллистических целей
    static int      BGMaxSumCount;      /// Максимальное суммарное количество баллистических целей

    /// Результирующие параметры по всему налету
    int             trackCount;         /// Количественный состав налета по ПР
    int             trackMaxCount;      /// Максимальный количественный состав налета по ПР
    static int      trackSumCount;      /// Количественный состав налета по всем ПР
    static int      trackMaxSumCount;   /// Максимальный количественный состав налета по всем ПР
};

}

#endif // AREA

