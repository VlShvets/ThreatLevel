#ifndef RESULTS_H
#define RESULTS_H

#include <QVBoxLayout>
#include <QLabel>
#include <QTableWidget>

namespace ThreatLevel
{

struct Area                     /// Позиционный район
{
    int num;                    /// Номер ПР

    /// Начальные параметры
    QPointF initPos;            /// Координаты центра
    float initRadius;           /// Радиус
    float initCritTime;         /// Критическое время
    float initRadarRange;       /// Радиус обнаружения

    QVector <int> numTrack;     /// Номера ассоциированных с ПР трасс

    /// Результирующие параметры
    float diffTime;             /// Разность времени поражения с погрешностью и точного времени поражения в текущий момент времени
    float sumDiffTime;          /// Сумма квадратов разности времени поражения с погрешностью и точного времени поражения
    float rmsDiffTime;          /// Среднеквадратическая разность времени поражения с погрешностью и точного времени поражения
};

struct Track                /// Трасса
{
    /// Минимально и максимально возможные значения скорости
    static const float MIN_SPEED = 180.0;   /// Минимальное значение скорости
    static const float MAX_SPEED = 250.0;   /// Максимальное значение скорости

    /// Погрешности
    static const float ERR_COURSE = 10.0;   /// Погрешность курса
    static const float ERR_SPEED = 30.0;    /// Погрешность скорости

    int num;                /// Номер трассы

    /// Начальные параметры
    QPointF initPos;        /// Начальные координаты
    float initCourse;       /// Начальный курс в радианах (при положительном значении скорости показывает направление движения трассы)
    float initSpeed;        /// Начальная скорость (может принимать отрицательные значения)
    float initAcceleration; /// Начальное ускорение (может принимать отрицательные значения)

    /// Текущие параметры
    QPointF pos;            /// Текущие координаты
    float speed;            /// Текущая скорость (может принимать отрицательные значения)

    /// Инициируемые при обнаружении трассы параметры
    QPointF startPos;       /// Координаты начальной точки траектории
    QPointF finalPos;       /// Координаты экстраполированного конца траектории
    int amtMeasure;         /// Количество измерений

    /// Параметры с погрешностью
    float errCourse;        /// Текущий курс в радианах с погрешностью
    float errSpeed;         /// Текущая скорость с погрешностью

    /// Параметры сглаживания погрешностей
    float errVx;            /// Проекция вектора скорости с погрешностью на ось абсцисс
    float errVy;            /// Проекция вектора скорости с погрешностью на ось ординат

    /// Связанные с ассоциированным позиционным районом параметры
    int numArea;            /// Номер ПР (-1 - ни с каким ПР трасса не ассоциированна)
    float startDist;        /// Расстояние от начальной точки траектории до центра ПР
    float angCourseToPA;    /// Угол между курсом и прямой от начальной точки траектории до центра ПР
    float errAngCourseToPA; /// Угол между курсом и прямой от начальной точки траектории до центра ПР с погрешностью

    /// Точки соприкосновения касательных от текущего положения трассы до границы ПР
    QPointF tanPoint1;
    QPointF tanPoint2;

    /// Текущее расстояние между проекцией трассы на прямую от начальной точки траектории до центра ПР и центром ПР
    float dist;             /// Текущее расстояние
    float errDist;          /// Текущее расстояние с погрешностью

    /// Результирующие параметры
    float time;             /// Время поражения ПР
    float errTime;          /// Время поражения ПР с погрешностью
};

class Results : public QWidget
{
    Q_OBJECT

public:
    explicit Results(QWidget *parent = 0);
    ~Results();

    void loadTable(const QVector <Area> &_area, const QVector <Track> &_track);

private:
    QTableWidget *tResults;     /// Таблица результатов
};

}

#endif // RESULTS_H
