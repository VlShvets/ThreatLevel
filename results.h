#ifndef RESULTS_H
#define RESULTS_H

#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QLabel>
#include <QLCDNumber>
#include <QTableWidget>

namespace ThreatLevel
{

/// Структура параметров позиционных районов
struct Area
{
    int num;                        /// Номер ПР

    /// Начальные параметры
    QPointF initPos;                /// Координаты центра
    float initRadius;               /// Радиус
    float initCritTime;             /// Критическое время
    float initRadarRange;           /// Радиус обнаружения

    /// Ассоциированные с ПР трассы
    QVector <int> numTrack;         /// Номера ассоциированных с ПР трасс
    int CMcount;                    /// Количество ассоциированных с ПР крылатых ракет
    int maxCMcount;                 /// Максимальное количество ассоциированных с ПР крылатых ракет
    int BGcount;                    /// Количество ассоциированных с ПР баллистических целей
    int maxBGcount;                 /// Максимальное количество ассоциированных с ПР баллистических целей
    int trackCount;                 /// Количественный состав налета по ПР
    int maxTrackCount;              /// Максимальный количественный состав налета по ПР

    /// Результирующие параметры
    float diffTime;                 /// Разность времени поражения с погрешностью и точного времени поражения в текущий момент времени
    float sumDiffTime;              /// Сумма квадратов разности времени поражения с погрешностью и точного времени поражения
    float rmsDiffTime;              /// Среднеквадратическая разность времени поражения с погрешностью и точного времени поражения

    /// Результирующие параметры по всем ПР
    static int sumCMcount;          /// Суммарное количество крылатых ракет
    static int maxSumCMcount;       /// Максимальное суммарное количество крылатых ракет
    static int sumBGcount;          /// Суммарное количество баллистических целей
    static int maxSumBGcount;       /// Максимальное суммарное количество баллистических целей
    static int sumTrackCount;       /// Количественный состав налета по всем ПР
    static int maxSumTrackCount;    /// Максимальный количественный состав налета по всем ПР
};

/// Структура параметров трасс
struct Track
{
    int num;                /// Номер трассы

    /// Начальные параметры
    QPointF initPos;        /// Начальные координаты
    float initCourse;       /// Начальный курс в радианах (при положительном значении скорости показывает направление движения трассы)
    float initSpeed;        /// Начальная скорость (может принимать отрицательные значения)
    float initAcceleration; /// Начальное ускорение (может принимать отрицательные значения)
    bool initBG;            /// Признак баллистической цели

    /// Текущие параметры
    QPointF pos;            /// Текущие координаты
    float speed;            /// Текущая скорость (может принимать отрицательные значения)

    /// Инициируемые при обнаружении трассы параметры
    QPointF startPos;       /// Координаты начальной точки траектории
    QPointF finalPos;       /// Координаты экстраполированного конца траектории
    int amtMeasure;         /// Количество измерений

    /// Параметры с погрешностью
    float errCourse;        /// Текущий курс в радианах с погрешностью
    float errSpeed;         /// Текущая скорость с погрешностью

    /// Параметры сглаживания погрешностей
    float errVx;            /// Проекция вектора скорости с погрешностью на ось абсцисс
    float errVy;            /// Проекция вектора скорости с погрешностью на ось ординат

    /// Связанные с ассоциированным позиционным районом параметры
    int numArea;            /// Номер ПР (-1 - ни с каким ПР трасса не ассоциированна)
    float startDist;        /// Расстояние от начальной точки траектории до центра ПР
    float angCourseToPA;    /// Угол между курсом и прямой от начальной точки траектории до центра ПР
    float errAngCourseToPA; /// Угол между курсом и прямой от начальной точки траектории до центра ПР с погрешностью

    /// Точки соприкосновения касательных от текущего положения трассы до границы ПР
    QPointF tanPoint1;
    QPointF tanPoint2;

    /// Текущее расстояние между проекцией трассы на прямую от начальной точки траектории до центра ПР и центром ПР
    float dist;             /// Текущее расстояние
    float errDist;          /// Текущее расстояние с погрешностью

    /// Результирующие параметры
    float time;             /// Время поражения ПР
    float errTime;          /// Время поражения ПР с погрешностью

    /// Результирующие параметры по всем трассам
    static float minErrTime;                        /// Минимальное время поражения ПР с погрешностью среди всех трасс

    static const int WEIGHT_COEF_BG = 25;           /// Весовой коэффициент баллистической цели
    static const float DEF_MIN_ERR_TIME = 1e+06;    /// Минимальное время поражения ПР с погрешностью по умолчанию

    /// Минимально и максимально возможные значения скорости
    static const float MIN_SPEED    = 180.0;    /// Минимальное значение скорости
    static const float MAX_SPEED    = 250.0;    /// Максимальное значение скорости

    /// Погрешности
    static const float ERR_COURSE   = 10.0;     /// Погрешность курса
    static const float ERR_SPEED    = 30.0;     /// Погрешность скорости
};

/// Класс виджета отображения результатов
class Results : public QWidget
{
    Q_OBJECT

public:
    explicit Results(QWidget *parent = 0);
    ~Results();

    /// Загрузка результатов
    void loadTable(const QVector <Area> &_area, const QVector <Track> &_track);

    /// Очистка таблицы результатов
    void resetTable();

private:
    QLCDNumber *lcdMaxSumTrack; /// Виджет отображающий максимимальный количественный состав налета
    QTableWidget *tResults;     /// Виджет отображения результатов

    static const int LCD_DIGIT_COUNT    = 4;    /// Число цифр в поле отображения максимального количественного состава налета
};

}

#endif // RESULTS_H
