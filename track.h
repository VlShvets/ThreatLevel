#ifndef TRACK
#define TRACK

#include <QPointF>

namespace ThreatLevel
{

/// Структура параметров трасс
struct Track
{
    /// Признак баллистической цели
    bool        isBG;                   /// Признак БЦ

    /// Начальные параметры
    QPointF     initStartPos;       /// Координаты точки старта
    QPointF     initFinalPos;       /// Координаты конечной точки
    float       initCourse;         /// Начальный курс в радианах
    float       initSpeed;          /// Начальная скорость (может принимать отрицательные значения)
    float       initAcceleration;   /// Начальное ускорение (может принимать отрицательные значения)
    int         initQuant;          /// Количественный состав (1 - 15)

    /// Точки соприкосновения касательных от текущего положения трассы до границы ПР
    QPointF     tanPoint1;
    QPointF     tanPoint2;

    /// Инициируемые при обнаружении трассы параметры
    QPointF     startPos;           /// Координаты начальной точки траектории
    QPointF     finalPos;           /// Координаты экстраполированного конца траектории

    /// Текущие параметры
    QPointF     pos;                /// Текущие координаты
    float       speed;              /// Текущая скорость (может принимать отрицательные значения)

    /// Параметры измерения
    float       errCourse;          /// Текущий курс в радианах с погрешностью
    float       errSpeed;           /// Текущая скорость с погрешностью
    int         amtMeasure;         /// Количество измерений

    /// Параметры сглаживания погрешностей
    float       errVx;              /// Проекция вектора скорости с погрешностью на ось абсцисс
    float       errVy;              /// Проекция вектора скорости с погрешностью на ось ординат

    /// Связанные с ассоциированным позиционным районом параметры
    int         numArea;            /// Номер ПР (-1 - ни с каким ПР трасса не ассоциированна)
    float       startDist;          /// Расстояние от начальной точки траектории до центра ПР
    float       angCourseToPA;      /// Угол между курсом и прямой от начальной точки траектории до центра ПР
    float       errAngCourseToPA;   /// Угол между курсом и прямой от начальной точки траектории до центра ПР с погрешностью

    /// Текущее расстояние между проекцией трассы на прямую от начальной точки траектории до центра ПР и центром ПР
    float       dist;               /// Текущее расстояние
    float       errDist;            /// Текущее расстояние с погрешностью

    /// --------------------------------------------------
    /// Результирующие параметры по конкретной трассе
    /// --------------------------------------------------

    /// Параметры времени поражения
    float   time;           /// Точное время поражения ПР
    float   errTime;        /// Время поражения ПР с погрешностью
    float   diffTime;       /// Разность времени поражения с погрешностью и точного времени поражения в текущий момент времени
    float   sumDiffTime;    /// Сумма квадратов разности времени поражения с погрешностью и точного времени поражения
    float   rmsDiffTime;    /// Среднеквадратическая разность времени поражения с погрешностью и точного времени поражения

    /// --------------------------------------------------
    /// Результирующие параметры по всем трассам
    /// --------------------------------------------------

    /// Трасса с минимальным временем поражения позиционного района
    static int  numTrackMinErrTime;     /// Номер трассы с минимальным временем поражения ПР с погрешностью

    /// --------------------------------------------------
    /// Константы
    /// --------------------------------------------------

    /// Тратиловый эквивалент баллистической цели
    static const int    BG_WEIGHT_COEF  = 25;       /// Весовой коэффициент тратилового эквивалента БЦ

    /// Минимально и максимально возможные значения скорости
    static const float  MIN_SPEED       = 180.0;    /// Минимальное значение скорости
    static const float  MAX_SPEED       = 250.0;    /// Максимальное значение скорости

    /// Погрешности
    static const float  ERR_COURSE      = 10.0;     /// Погрешность курса
    static const float  ERR_SPEED       = 30.0;     /// Погрешность скорости
};

}

#endif // TRACK

