#ifndef TRACK
#define TRACK

#include <QPointF>

namespace ThreatLevel
{

/// Структура параметров трасс
struct Track
{
    /// Начальные параметры
    bool        initIsBG;               /// Признак БЦ
    QPointF     initStartPos;           /// Координаты точки старта
    QPointF     initFinalPos;           /// Координаты конечной точки
    float       initCourse;             /// Начальный курс в радианах
    float       initSpeed;              /// Начальная скорость
    float       initAcceleration;       /// Начальное ускорение (может принимать отрицательные значения)
    int         initQuant;              /// Количественный состав (1 - 15)

    /// Точки соприкосновения касательных от текущего положения трассы до границы ПР
    QPointF     tanPoint1;              /// Точка соприкосновения касательных №1
    QPointF     tanPoint2;              /// Точка соприкосновения касательных №2

    /// Инициируемые при обнаружении трассы параметры
    QPointF     startPos;               /// Координаты начальной точки траектории
    QPointF     finalPos;               /// Координаты экстраполированного конца траектории

    /// Текущие параметры
    QPointF     exactPos;               /// Текущие координаты
    float       exactSpeed;             /// Текущая скорость

    /// Параметры измерения
    float       measCourse;             /// Текущий измеренный курс в радианах с погрешностью
    float       measSpeed;              /// Текущая измеренная скорость с погрешностью
    int         countMeas;              /// Количество измерений

    /// Параметры сглаживания погрешностей
    float       smoothVx;               /// Сглаженная проекция вектора скорости с погрешностью на ось абсцисс
    float       smoothVy;               /// Сглаженная проекция вектора скорости с погрешностью на ось ординат

    /// Инициируемые при ассоциации с позиционным районом параметры
    int         numArea;                /// Номер ПР (-1 - ни с каким ПР трасса не ассоциированна)
    float       startDist;              /// Расстояние от начальной точки траектории до центра ПР
    float       startTime;              /// Время поражения ПР от начальной точки траектории

    /// Пересчитываемые связанные с позиционным районом параметры
    float       angCourseToPA;          /// Угол между курсом и прямой от начальной точки траектории до центра ПР
    float       distToPA;               /// Расстояние от проекции текущей точки траектории до центра ПР
    float       timeToPA;               /// Время поражения ПР

    /// --------------------------------------------------
    /// Результирующие параметры по конкретной трассе
    /// --------------------------------------------------

    /// Параметры СКО времени поражения ПР
    float       diffTime;               /// Разность вычисленного и измеренного времени поражения ПР в текущий момент времени
    float       sumDiffTime;            /// Сумма квадратов разности вычисленного и измеренного времени поражения ПР
    float       rmsDiffTime;            /// Среднеквадратическая разность вычисленного и измеренного времени поражения ПР

    /// --------------------------------------------------
    /// Результирующие параметры по всем трассам
    /// --------------------------------------------------

    /// Трасса с минимальным временем поражения позиционного района
    static int  numTrackMinErrTime;     /// Номер трассы с минимальным временем поражения ПР с погрешностью

    /// --------------------------------------------------
    /// Константы
    /// --------------------------------------------------

    /// Тратиловый эквивалент баллистической цели
    static const int    BG_WEIGHT_COEF  = 25;       /// Весовой коэффициент тратилового эквивалента БЦ

    /// Минимально и максимально возможные значения скорости
    static const float  MIN_SPEED       = 180.0;    /// Минимальное значение скорости
    static const float  MAX_SPEED       = 250.0;    /// Максимальное значение скорости

    /// Погрешности
    static const float  ERR_COURSE      = 10.0;     /// Погрешность курса
    static const float  ERR_SPEED       = 30.0;     /// Погрешность скорости
};

}

#endif // TRACK

